package com.itmayiedu.day05;

/**
 *
 * 方法区：
 * 堆：创建的对象，new出来的对象，数组等等都存放在堆里面。
 *  堆内存：
 *      新生代：垃圾回收机制，没有经常回收的区域。
 *              eden：刚创建的对象会存放在这个区域里面。
 *              s0：
 *              s1： 三个区域。
 *      老年代：对象被频繁的使用。
 *栈：局部变量一般存放在栈里面。代码运行结束自动释放内存。不会发生线程安全问题（每个线程私有的互不共享的）.
 * 本地方法栈：主要是调用C语言的。JNI技术，
 *
 * 调优问题：1。在WEB开发过程中，不要定义过多的常量，避免有过多的使用static修饰。
 *          2。尽量减少垃圾回收机制的次数。
 *          3。新生代回收次数大于老年代的回收次数。
 *
 * jVM参数调优：
 *  虚拟机参数配置：在虚拟机的运行过程中，如果可以跟踪系统的运行状态，那么对于问题的故障，排查会有一定的帮助，为此，在虚拟机提供了一些
 *  跟踪系统状态的参数，使用给定的参数，执行java虚拟机，就可以咋系统运行是打印相关的日志，用于分析实际问题，我们进行虚拟机参数配置，其实就是
 *  围绕栈 堆 方法区进行配置，
 *  堆参数设置：
 *      --XX：+PrintGC：每次触发GC的时候打印相关日志。
 *      --XX：UseSerialGC：串行回收，
 *      --XX：PrintGCDetails：更新详细的 GC日志，
 *      --Xms：堆初始化值：
 *      --Xmx：堆最大可用值：
 *      --XX：SurivorRatio:用来设置新生代eden空间和form/to空间的比例：
 *     在实际的工作中，我们可以直接初始化堆的大小和最大堆的大小相等。这样的好处是减少程序在运行时垃圾回收次数，从而降低效率。
 *   jVM参数调优：
 *      1。堆初始化内存和堆最大内存一定用到保持一致，减少垃圾回收的次数，
 *      2。设置新生代与老年代的回收比例。
 */
public class Demo01 {

    private static int count = 0;//使用static关键字修饰的话，相当于全局变量，存在咋方法区里面。会被所有的线程共享。

    public static void main(String[] args) {
        Demo01 demo01 = new Demo01();
        ++demo01.count;
        ++demo01.count;
        System.out.println(demo01.count);
        Demo01 demo02 = new Demo01();
      // ++demo02.count;
        System.out.println(demo02.count);
    }


}
