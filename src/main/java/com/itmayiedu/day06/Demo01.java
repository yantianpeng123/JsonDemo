package com.itmayiedu.day06;

/**
 * 垃圾回收机制概述：
 *  Java语言中最显著的一个特点就是引入了垃圾回收机制，使C++程序员最头疼的内存管理问题
 *  迎刃而解，它使得Java程序员在编程的时候不需要考虑内存管理，由于有个垃圾回收机制，
 *  Java中的对象不再有作用域的概念，只有对象的引用才有作用域，垃圾回收机制可以有效防止内存泄露，有效的使用空闲的内存
 *  ps：内存泄露，是指在该内存空间使用完毕之后未回收，再不涉及复杂的数据结构的一般情况下，Java的内存泄露表现为一个内存生命
 *  周期超出了程序需要它的时间长度，我们有时候也将起称为对象游离。
 *  垃圾回收机制的算法：
 *      引用计数法：
 *          给对象添加一个引用计数器，每当有一个地方引用它是，计数器的值就增加1，当引用失效时，计数器的值就减少1，任何时刻计数器都为0
 *          的对象就是不再被使用的。垃圾收集器将回收该对象使用的内存。
 *         优点：引用计数器可以很快的执行，交织在程序中，对程序中需要不被长时间打断的实时环境比较有利。
 *         缺点：无法检测出循环引用，如父对象有一个自对象的引用，子对象反过来引用父对象，这样他们的引用计数永远不可能为0，而且每次加减非常浪费内存。
 *
 *      标记清楚算法：
 *      复制算法：
 *          主要用在新生代S0区和S1区
 *      标记压缩：
 *          老年代：
 *      分代算法：
 *          新生代和老年代
 */
public class Demo01 {

    public static void main(String[] args) {
        Demo01 demo01 = new Demo01();
        demo01 =null;
        System.gc();
    }
    @Override
    protected void finalize() throws Throwable {
        //gc回收垃圾之前执行。
        System.out.println("垃圾回收机制。。。");
        super.finalize();
    }
}
